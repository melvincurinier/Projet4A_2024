# Projet "Visualisation de l'évolution de trajectoires"

## ToDo (version initiale)

- [x] Passer à un mongodb local, mettre en place l'environnement de dév, faire tourner la version initiale (2021) https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/

- [x] Voir où sont stockées les informations sur les utilisateurs (e-mails, mots de passe)

- [x] Faire en sorte que la config/le choix soit facile pour les couleurs utilisées pour chaque type d'évolution (emerging (vert), decreasing (rouge), latent (bleu), lost (jaune), jumping (gris), default (rose))

- [x] Affichage d'une légende pour ces couleurs ? (en permanance ou si clic quelque part)

- [ ] Faciliter le chargement de resultats (grid+color) :
    - Possibilité de charger tous les fichiers d'un dossier (pour les utilisateurs connectés)
    - Alimenter la base avec les resultats existants (autres fichiers seront fournis)

- [x] Revoir l'ergonomie, la facilité d'utilisation de l'appli/l'interface

- [ ] Point sur les fonctionnalités restantes/manquantes (par rapport à la version précédente de 2019)

- [x] Sécuriser mongodb

- [ ] Faciliter le deploiement avec docker (aussi pour mongobd avec bind mount pour stockage donnees hors du container, dans l'espace disque classique pour persistance au container, faciliter les sauvegardes, ...)

- [x] Trouver un nouvel acronyme et logo ? (TrajEvoViz, ...)

### Remarques :
- ne pas utiliser docker pour le moment
- bien noter et lister dans un fichier les numér os de version utilisés (mongo ..., node ..., etc.)

## Versions technologies

### API

| Nom du logiciel | Version | Description                           |
|-----------------|---------|---------------------------------------|
| Node            | 21.6.2 | Serveur web                           |
| Body Parser     | 1.20.2  | Parsing du corps des requêtes         |
| Dot Env         | 16.4.5  | Gestion des variables d'environnement |
| Express         | 4.16.4  | Gestion des routes et services web    |
| GridFS-Stream   | 1.1.1   | Permet de lire des fichiers GridFS depuis Mongo |
| JsonWebToken    | 9.0.2   | Gestion des tokens JWT                |
| Mongoose        | 5.4.3   | Gestion de la connexion à MongoDB     |
| ShellJS         | 0.8.3   | Utilisation de commandes Shell en JS  |
| UUID            | 8.3.2   | Génération d'identifiants utilisateurs uniques |

### Frontend

| Nom du logiciel | Version | Description                           |
|-----------------|---------|---------------------------------------|
| @angular        | 17.3.1  | Angular                               |
| Leaflet         | 1.7.1   | API de cartographie                   |
| RXJS            | 6.6.0   | Observables                           |
| TsLib           | 2.3.0   | TypeScript helpers                    |

## Informations des utilisateurs

Dans mongo.js, 

    userSchema = mongoose.Schema({
        _id: String,
        email : String,
        password : String,
    })

    userModel = mongoose.model( 'users', userSchema )

fonctions disponibles : getUserModel, newUserModel

Les informations sont stockées dans la collection 'users' de la bdd mongo.

## MongoDB local

    const config = {
        MONGO_URL: 'mongodb://localhost:27017/traj'
    };

## Couleurs utilisés pour les types d'évolution

dans le dossier front, src, app, composant map

    const mapAreaColor = [{name: "EMERGING", color: "#009900"}, 
                    {name: "DECREASING", color: "#b32d00"}, 
                    {name: "LATENT", color: "#0039e6"}, 
                    {name: "LOST", color: "#ffff00"}, 
                    {name: "JUMPING", color: "#3d3d29"}, 
                    {name: "DEFAULT", color: "#f442e8"}];

A ajouter : "DECREASING EMERGING", "DECREASING LATENT", "DECREASING LATENT EMERGING", "LATENT DECREASING EMERGING", "LATENT EMERGING", "LATENT DECREASING"

La constante devient const mapAreaColor = [{name: "EMERGING", color: "#009900"}, 
                {name: "DECREASING", color: "#B32D00"}, 
                {name: "LATENT", color: "#0039e6"}, 
                {name: "LOST", color: "#ffff00"}, 
                {name: "JUMPING", color: "#3d3d29"}, 
                {name: "DEFAULT", color: "#f442e8"},
                {name: "DECREASING EMERGING", color:"FFA500"},
                {name: "DECREASING LATENT", color:"8A2BE2"},
                {name: "DECREASING LATENT EMERGING", color:"FF8C00"},
                {name: "LATENT DECREASING EMERGING", color:"FF4500"},
                {name: "LATENT EMERGING", color:"00CED1"},
                {name: "LATENT DECREASING", color:"9400D3"}];

## Sécuriser MongoDB

Comme on a une version plus récente de mongo, il y a des composantes dépréciées. On les corrige pour plus de sécurité :
- (node:63346) DeprecationWarning: current URL string parser is deprecated, and will be removed in a future version. To use the new parser, pass option { useNewUrlParser: true } to MongoClient.connect.
- (node:63346) [MONGODB DRIVER] Warning: Current Server Discovery and Monitoring engine is deprecated, and will be removed in a future version. To use the new Server Discover and Monitoring engine, pass option { useUnifiedTopology: true } to the MongoClient constructor.

mongoose.connect(MONGO_URL, { useNewUrlParser: true, useUnifiedTopology: true },  function( error ))


## Acronyme et logo

Flow

Exemple : TrajEvoViz, Tracker